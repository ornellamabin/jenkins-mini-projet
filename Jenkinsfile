pipeline {
    agent {
        docker {
            image 'maven:3.8.5-openjdk-17'
        }
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        SSH_CREDENTIALS = credentials('ssh-credentials')
        
        // Configuration des serveurs
        STAGING_SERVER = 'votre-staging-server-ip'
        PRODUCTION_SERVER = 'votre-production-server-ip'
    }

    stages {
        // √âtape 1: Tests et Build
        stage('Tests et Build') {
            steps {
                echo 'üß™ Ex√©cution des tests et construction...'
                sh 'mvn clean package -Dmaven.test.failure.ignore=true'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    // Archive les artefacts avec un pattern plus flexible
                    archiveArtifacts artifacts: 'target/*.jar, target/*.war', allowEmptyArchive: true
                }
            }
        }

        // √âtape 2: Construction Image Docker
        stage('Build Image Docker') {
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                script {
                    // Trouve le fichier JAR/WAR g√©n√©r√©
                    def jarFile = findFiles(glob: 'target/*.jar')[0]?.name
                    if (!jarFile) {
                        jarFile = findFiles(glob: 'target/*.war')[0]?.name
                    }
                    
                    if (jarFile) {
                        env.APP_JAR = jarFile
                        echo "Fichier d'application trouv√©: ${jarFile}"
                    } else {
                        error "Aucun fichier JAR/WAR trouv√© dans target/"
                    }
                    
                    // R√©cup√®re la version du projet
                    def version = sh(script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                    env.APP_VERSION = version
                }
                sh '''
                    docker build -t $DOCKERHUB_CREDENTIALS_USR/spring-app:${APP_VERSION} .
                    docker tag $DOCKERHUB_CREDENTIALS_USR/spring-app:${APP_VERSION} $DOCKERHUB_CREDENTIALS_USR/spring-app:latest
                '''
            }
        }

        // √âtape 3: Push vers DockerHub
        stage('Push DockerHub') {
            steps {
                echo 'üì§ Envoi vers DockerHub...'
                sh '''
                    echo "$DOCKERHUB_CREDENTIALS_PSW" | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                    docker push $DOCKERHUB_CREDENTIALS_USR/spring-app:${APP_VERSION}
                    docker push $DOCKERHUB_CREDENTIALS_USR/spring-app:latest
                '''
            }
        }

        // √âtape 4: D√©ploiement Staging (optionnel)
        stage('D√©ploiement Staging') {
            when {
                branch 'main'
            }
            steps {
                echo 'üöÄ D√©ploiement en environnement staging...'
                script {
                    try {
                        sshagent(['ssh-credentials']) {
                            sh """
                                ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@${env.STAGING_SERVER} "
                                    docker pull $DOCKERHUB_CREDENTIALS_USR/spring-app:latest
                                    docker stop spring-app-staging || true
                                    docker rm spring-app-staging || true
                                    docker run -d --name spring-app-staging -p 8080:8080 \
                                        $DOCKERHUB_CREDENTIALS_USR/spring-app:latest
                                "
                            """
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è D√©ploiement staging √©chou√© mais continuation: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Statut du build: ${currentBuild.currentResult}"
            echo "Version construite: ${env.APP_VERSION ?: 'N/A'}"
        }

        success {
            echo 'üéâ Pipeline ex√©cut√©e avec succ√®s!'
        }

        failure {
            echo '‚ùå Pipeline √©chou√©e! V√©rifiez les logs pour plus de d√©tails.'
        }
    }
}