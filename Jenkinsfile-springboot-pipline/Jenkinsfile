pipeline {
    agent any
    
    tools {
        maven 'M3'
        jdk 'jdk17'
    }
    
    environment {
        APP_NAME = "springboot-app"
        PROJECT_DIR = "springbootapp"
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'üöÄ Clonage du d√©p√¥t...'
                    git branch: 'main',
                         url: 'https://github.com/ornellamabin/jenkins-mini-projet.git',
                         credentialsId: 'github-credentials',
                         extensions: [
                             [$class: 'CloneOption', 
                              depth: 1, 
                              shallow: true,
                              noTags: false,
                              timeout: 60]
                         ]
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo 'üî® Construction du projet...'
                    dir(PROJECT_DIR) {
                        sh 'mvn clean compile'
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    echo 'üß™ Ex√©cution des tests...'
                    dir(PROJECT_DIR) {
                        sh 'mvn test'
                    }
                }
            }
            
            post {
                always {
                    dir(PROJECT_DIR) {
                        junit 'target/surefire-reports/*.xml'
                    }
                }
            }
        }
        
        stage('Package') {
            steps {
                script {
                    echo 'üì¶ Packaging de l application...'
                    dir(PROJECT_DIR) {
                        sh 'mvn package -DskipTests'
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    echo 'üöÄ D√©ploiement...'
                    dir(PROJECT_DIR) {
                        echo 'D√©ploiement r√©ussi!'
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                        
                        // Optionnel : Stockage des m√©tadonn√©es du build
                        script {
                            currentBuild.description = "Version: ${APP_NAME} - Build #${BUILD_NUMBER}"
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage de l espace de travail...'
            cleanWs()
            
            // Rapport de qualit√© du code (optionnel)
            dir(PROJECT_DIR) {
                recordIssues(
                    tools: [java(), maven()],
                    enabledForFailure: true
                )
            }
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s!'
            emailext (
                subject: "SUCC√àS: Pipeline ${APP_NAME} - Build #${BUILD_NUMBER}",
                body: "Le build ${BUILD_NUMBER} a r√©ussi. Consultez: ${BUILD_URL}",
                to: "votre-email@example.com"
            )
        }
        failure {
            echo '‚ùå √âchec du pipeline!'
            emailext (
                subject: "√âCHEC: Pipeline ${APP_NAME} - Build #${BUILD_NUMBER}",
                body: "Le build ${BUILD_NUMBER} a √©chou√©. Consultez: ${BUILD_URL}",
                to: "votre-email@example.com"
            )
        }
        unstable {
            echo '‚ö†Ô∏è  Pipeline instable (tests √©chou√©s)!'
        }
    }
}