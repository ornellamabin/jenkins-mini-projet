pipeline {
    agent any
    
    options {
        timeout(time: 30, unit: 'MINUTES')
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'üöÄ Clonage du d√©p√¥t avec shallow clone...'
                    git branch: 'main',
                         url: 'https://github.com/ornellamabin/jenkins-mini-projet.git',
                         credentialsId: 'github-credentials', // √Ä adapter avec vos credentials
                         extensions: [
                             [$class: 'CloneOption', 
                              depth: 1, 
                              shallow: true,
                              noTags: false,
                              timeout: 60],
                             [$class: 'CheckoutOption', timeout: 30]
                         ]
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo 'üî® Construction du projet...'
                    // Ajoutez vos commandes de build ici
                    sh 'mvn clean compile'  // Pour Windows
                    // ou sh './mvnw clean compile'  // Pour Linux
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    echo 'üß™ Ex√©cution des tests...'
                    bat 'mvn test'  // Pour Windows
                    // ou sh './mvnw test'  // Pour Linux
                }
            }
        }
        
        stage('Package') {
            steps {
                script {
                    echo 'üì¶ Packaging de l application...'
                    bat 'mvn package -DskipTests'  // Pour Windows
                    // ou sh './mvnw package -DskipTests'  // Pour Linux
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    echo 'üöÄ D√©ploiement...'
                    // Ajoutez vos √©tapes de d√©ploiement ici
                    echo 'D√©ploiement r√©ussi!'
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Nettoyage...'
            cleanWs()  // Nettoie le workspace
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s!'
        }
        failure {
            echo '‚ùå √âchec du pipeline!'
            // Vous pouvez ajouter des notifications ici
        }
    }
}