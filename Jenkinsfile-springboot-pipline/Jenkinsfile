pipeline {
    agent {
        docker {
            image 'maven:3.8.6-openjdk-17'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v /usr/bin/docker:/usr/bin/docker'
            reuseNode true
        }
    }
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        SONAR_TOKEN = credentials('sonarcloud-token')
        SSH_CREDENTIALS = credentials('ssh-deploy-credentials')
        SLACK_CHANNEL = '#your-slack-channel'
        DOCKER_IMAGE = 'votre-dockerhub-username/springboot-app'
        DOCKER_TAG = "${env.BRANCH_NAME == 'main' ? 'latest' : env.BRANCH_NAME}"
    }
    
    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'üöÄ Clonage du d√©p√¥t...'
                    git branch: "${env.BRANCH_NAME}",
                         url: 'https://github.com/ornellamabin/jenkins-mini-projet.git',
                         credentialsId: 'github-credentials',
                         extensions: [[$class: 'CloneOption', depth: 1, shallow: true]]
                }
            }
        }
        
        stage('Tests Automatis√©s') {
            steps {
                script {
                    echo 'üß™ Ex√©cution des tests unitaires et d int√©gration...'
                    dir('springbootapp') {
                        sh 'mvn test'
                    }
                }
            }
            post {
                always {
                    junit 'springbootapp/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Analyse Qualit√© Code avec SonarCloud') {
            when {
                expression { 
                    env.BRANCH_NAME == 'main' || 
                    env.BRANCH_NAME == 'develop' || 
                    env.CHANGE_TARGET == 'main' 
                }
            }
            steps {
                script {
                    echo 'üîç Analyse statique du code avec SonarCloud...'
                    dir('springbootapp') {
                        withCredentials([string(credentialsId: 'sonarcloud-token', variable: 'SONAR_TOKEN')]) {
                            sh """
                                mvn sonar:sonar \
                                  -Dsonar.projectKey=votre-project-key \
                                  -Dsonar.organization=votre-organisation \
                                  -Dsonar.host.url=https://sonarcloud.io \
                                  -Dsonar.login=${SONAR_TOKEN}
                            """
                        }
                    }
                }
            }
        }
        
        stage('Compilation et Packaging Docker') {
            steps {
                script {
                    echo 'üì¶ Construction et packaging de l application...'
                    dir('springbootapp') {
                        // Build de l'application
                        sh 'mvn clean package -DskipTests'
                        
                        // Construction de l'image Docker
                        sh """
                            docker build -t ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} .
                        """
                        
                        // Login et push vers DockerHub
                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', 
                                                         usernameVariable: 'DOCKER_USER', 
                                                         passwordVariable: 'DOCKER_PASS')]) {
                            sh """
                                echo \"${DOCKER_PASS}\" | docker login -u \"${DOCKER_USER}\" --password-stdin
                                docker push ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}
                            """
                        }
                    }
                }
            }
        }
        
        stage('D√©ploiement Staging') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo 'üöÄ D√©ploiement en environnement de staging...'
                    deployToServer('staging-server-hostname', 'staging')
                }
            }
        }
        
        stage('Tests Validation Staging') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo '‚úÖ Validation du d√©ploiement staging...'
                    sh """
                        curl -f http://staging-server-hostname:8080/health || exit 1
                        curl -f http://staging-server-hostname:8080/api/hello || exit 1
                    """
                    echo '‚úÖ Tests de validation staging r√©ussis!'
                }
            }
        }
        
        stage('D√©ploiement Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo 'üéØ D√©ploiement en production...'
                    input message: 'D√©ployer en production?', ok: 'D√©ployer'
                    deployToServer('production-server-hostname', 'production')
                }
            }
        }
        
        stage('Tests Validation Production') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo '‚úÖ Validation du d√©ploiement production...'
                    sh """
                        curl -f http://production-server-hostname:8080/health || exit 1
                        curl -f http://production-server-hostname:8080/api/hello || exit 1
                    """
                    echo '‚úÖ Tests de validation production r√©ussis!'
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Nettoyage de l'espace de travail..."
            // cleanWs() // D√©commentez si n√©cessaire
        }
        success {
            echo "‚úÖ Pipeline ex√©cut√©e avec succ√®s!"
            slackSend channel: "${env.SLACK_CHANNEL}", 
                     color: "good", 
                     message: "SUCC√àS: Pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BRANCH_NAME}) - ${env.BUILD_URL}"
        }
        failure {
            echo "‚ùå √âchec de la pipeline!"
            slackSend channel: "${env.SLACK_CHANNEL}", 
                     color: "danger", 
                     message: "√âCHEC: Pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BRANCH_NAME}) - ${env.BUILD_URL}"
        }
        unstable {
            slackSend channel: "${env.SLACK_CHANNEL}", 
                     color: "warning", 
                     message: "INSTABLE: Pipeline ${env.JOB_NAME} #${env.BUILD_NUMBER} (${env.BRANCH_NAME}) - ${env.BUILD_URL}"
        }
    }
}

// Fonction pour d√©ployer sur un serveur via SSH
def deployToServer(serverHostname, environment) {
    withCredentials([sshUserPrivateKey(credentialsId: 'ssh-deploy-credentials', 
                                     keyFileVariable: 'SSH_KEY', 
                                     usernameVariable: 'SSH_USER')]) {
        sh """
            ssh -o StrictHostKeyChecking=no -i ${SSH_KEY} ${SSH_USER}@${serverHostname} << 'EOF'
                # Arr√™ter le conteneur existant
                docker stop springboot-app-${environment} || true
                docker rm springboot-app-${environment} || true
                
                # Pull de la nouvelle image
                echo \"${DOCKER_PASS}\" | docker login -u \"${DOCKER_USER}\" --password-stdin
                docker pull ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}
                
                # Lancer le nouveau conteneur
                docker run -d \\
                  --name springboot-app-${environment} \\
                  -p 8080:8080 \\
                  -e SPRING_PROFILES_ACTIVE=${environment} \\
                  ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}
                
                # Nettoyage des anciennes images
                docker image prune -f
            EOF
        """
    }
    echo "‚úÖ D√©ploiement sur ${serverHostname} (${environment}) r√©ussi!"
}