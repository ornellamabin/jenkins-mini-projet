pipeline {
    agent any

    tools {
        maven 'M3'
        jdk 'jdk17'
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
    }

    environment {
        APP_NAME    = "springboot-app"
        DOCKER_USER = "ton_dockerhub_user"

        // Credentials Jenkins (√† cr√©er)
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
        SONAR_TOKEN           = credentials('sonar-token')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üöÄ Clonage du d√©p√¥t...'
                git branch: "${env.BRANCH_NAME}",
                     url: 'https://github.com/ornellamabin/jenkins-mini-projet.git',
                     credentialsId: 'github-credentials'
            }
        }

        stage('Build') {
            steps {
                echo 'üî® Construction du projet...'
                dir('springbootapp') {
                    sh 'mvn clean compile'
                }
            }
        }

        stage('Tests') {
            steps {
                echo 'üß™ Ex√©cution des tests...'
                dir('springbootapp') {
                    sh 'mvn test'
                }
            }
        }

        stage('Analyse Qualit√© (SonarCloud)') {
            steps {
                echo 'üîç Analyse SonarCloud...'
                dir('springbootapp') {
                    sh """
                    mvn sonar:sonar \
                       -Dsonar.projectKey=${APP_NAME} \
                       -Dsonar.organization=ton_org_sonar \
                       -Dsonar.host.url=https://sonarcloud.io \
                       -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }

        stage('Package') {
            steps {
                echo 'üì¶ Packaging de l application...'
                dir('springbootapp') {
                    sh 'mvn package -DskipTests'
                }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                echo 'üê≥ Build et Push Docker...'
                dir('springbootapp') {
                    sh "docker build -t ${DOCKER_USER}/${APP_NAME}:${BUILD_NUMBER} ."
                    sh """
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | \
                    docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    docker push ${DOCKER_USER}/${APP_NAME}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Deploy Staging') {
            when { branch 'main' }
            steps {
                echo 'üöÄ D√©ploiement Staging...'
                sshagent(['ssh-staging']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no user@staging-server '
                        docker pull ${DOCKER_USER}/${APP_NAME}:${BUILD_NUMBER} &&
                        docker stop ${APP_NAME} || true &&
                        docker rm ${APP_NAME} || true &&
                        docker run -d --name ${APP_NAME} -p 8080:8080 ${DOCKER_USER}/${APP_NAME}:${BUILD_NUMBER}
                    '
                    """
                }
            }
        }

        stage('Deploy Production') {
            when { branch 'main' }
            steps {
                input message: "‚ö†Ô∏è D√©ployer en Production ?"
                echo 'üöÄ D√©ploiement Production...'
                sshagent(['ssh-prod']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no user@prod-server '
                        docker pull ${DOCKER_USER}/${APP_NAME}:${BUILD_NUMBER} &&
                        docker stop ${APP_NAME} || true &&
                        docker rm ${APP_NAME} || true &&
                        docker run -d --name ${APP_NAME} -p 80:8080 ${DOCKER_USER}/${APP_NAME}:${BUILD_NUMBER}
                    '
                    """
                }
            }
        }

        stage('Validation D√©ploiement') {
            when { branch 'main' }
            steps {
                echo '‚úÖ V√©rification d√©ploiement...'
                sh 'curl -f http://prod-server/actuator/health'
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage...'
            cleanWs()
        }
        success {
            echo '‚úÖ Pipeline ex√©cut√©e avec succ√®s!'
            slackSend(channel: '#ci-cd',
                      message: "‚úÖ SUCCESS | ${APP_NAME} | Build #${BUILD_NUMBER}")
        }
        failure {
            echo '‚ùå √âchec du pipeline!'
            slackSend(channel: '#ci-cd',
                      message: "‚ùå FAILURE | ${APP_NAME} | Build #${BUILD_NUMBER}")
        }
    }
}
