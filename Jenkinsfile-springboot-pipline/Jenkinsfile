pipeline {
    agent any
    tools {
        maven 'M3'
        jdk 'jdk17'
    }
    environment {
        SONAR_TOKEN = credentials('sonarcloud-token')
        GITHUB_CREDS = credentials('github-credentials')
    }
    stages {
        // √âtape 1: Clone du code
        stage('Clone Git Repository') {
            steps {
                git(
                    branch: 'main',
                    url: 'https://github.com/ornellamabin/jenkins-mini-projet.git',
                    credentialsId: 'github-credentials'
                )
                echo '‚úÖ Repository clon√© avec succ√®s'
            }
        }
        
        // √âtape 2: Build et compilation
        stage('Build Application') {
            steps {
                sh '''
                    cd springbootapp
                    mvn clean compile -q
                '''
                echo '‚úÖ Application compil√©e avec succ√®s'
            }
        }
        
        // √âtape 3: Tests unitaires
        stage('Run Unit Tests') {
            steps {
                sh '''
                    cd springbootapp
                    mvn test -q
                '''
                echo '‚úÖ Tests unitaires ex√©cut√©s'
            }
            post {
                always {
                    junit 'springbootapp/target/surefire-reports/*.xml'
                    archiveArtifacts 'springbootapp/target/*.jar'
                }
            }
        }
        
        // √âtape 4: Analyse SonarCloud
        stage('SonarCloud Analysis') {
            when {
                branch 'main'
            }
            steps {
                withSonarQubeEnv('SonarCloud') {
                    sh '''
                        cd springbootapp
                        mvn sonar:sonar \
                          -Dsonar.projectKey=springboot-app \
                          -Dsonar.organization=ornellamabin \
                          -Dsonar.login=$SONAR_TOKEN \
                          -Dsonar.host.url=https://sonarcloud.io
                    '''
                }
                echo '‚úÖ Analyse SonarCloud effectu√©e'
            }
        }
    }
    post {
        success {
            echo 'üéâ Pipeline ex√©cut√©e avec succ√®s!'
            slackSend(
                channel: '#jenkins',
                message: "SUCCESS: Build ${env.BUILD_NUMBER} - ${env.JOB_NAME}"
            )
        }
        failure {
            echo '‚ùå Pipeline a √©chou√©!'
            slackSend(
                channel: '#jenkins', 
                message: "FAILURE: Build ${env.BUILD_NUMBER} - ${env.JOB_NAME}"
            )
        }
    }
}